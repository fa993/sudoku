{"version":3,"file":"static/js/25.6ccc4f1d.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","dlx.js","worker.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","const DIM = 9;\nconst COL_EXTEND = 4;\n\n//sudoku rules\n//only 1 of the number 1-9 in each row column\n//box rules will introduce later\n//poc for 3x3 sudoku\n\n//structure\n// first row is control row\n// contains down links to the contained row\n\nfunction make_matrix() {\n\tlet mat = Array.from({ length: DIM * DIM * DIM }, (_v, _i) =>\n\t\tArray.from({ length: DIM * DIM * COL_EXTEND }, (_v2, _i2) => false)\n\t);\n\n\t//row constraints\n\tfor (let j = 0; j < DIM * DIM; j++) {\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tmat[j * DIM + i][Math.floor(j / DIM) * DIM + i] = true;\n\t\t}\n\t}\n\n\t//col constraints\n\tfor (let i = 0; i < DIM * DIM * DIM; i++) {\n\t\tlet col = Math.floor(i / DIM) % DIM;\n\t\tlet num = i % DIM;\n\t\tmat[i][DIM * DIM + col * DIM + num] = true;\n\t}\n\n\t//row-col constraints\n\tfor (let j = 0; j < DIM * DIM; j++) {\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tmat[j * DIM + i][2 * DIM * DIM + j] = true;\n\t\t}\n\t}\n\n\t//box-constraints\n\tfor (let i = 0; i < DIM * DIM * DIM; i++) {\n\t\tlet col = Math.floor(i / DIM) % DIM;\n\t\tlet row = Math.floor(i / (DIM * DIM));\n\t\tlet num = i % DIM;\n\t\tlet off = -1;\n\t\tswitch (Math.floor(row / 3) * 10 + Math.floor(col / 3)) {\n\t\t\tcase 0:\n\t\t\t\toff = 0;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\toff = 1;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\toff = 2;\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\toff = 3;\n\t\t\t\tbreak;\n\t\t\tcase 11:\n\t\t\t\toff = 4;\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\t\toff = 5;\n\t\t\t\tbreak;\n\t\t\tcase 20:\n\t\t\t\toff = 6;\n\t\t\t\tbreak;\n\t\t\tcase 21:\n\t\t\t\toff = 7;\n\t\t\t\tbreak;\n\t\t\tcase 22:\n\t\t\t\toff = 8;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'row column out of bounds or something screwed up in group resolution'\n\t\t\t\t);\n\t\t}\n\t\tmat[i][3 * DIM * DIM + num + DIM * off] = true;\n\t}\n\treturn mat;\n}\n\nclass SparseNode {\n\tright = null;\n\tleft = null;\n\tup = null;\n\tdown = null;\n\theader = null;\n\ti = -1;\n\tj = -1;\n\trow = -1;\n\tcol = -1;\n\tnum = 0;\n\tis_covered = false;\n\n\tappend_right_header() {\n\t\tthis.right = new SparseNode();\n\t\tthis.right.left = this;\n\t\tthis.right.header = this.right;\n\t}\n\n\tjump_to_lowest() {\n\t\tlet prev = this;\n\t\tfor (let n = this.down; n !== null && n !== this; prev = n, n = n.down) {}\n\t\treturn prev;\n\t}\n\n\tpopulate_from_sparse_row_index(i) {\n\t\tthis.col = Math.floor(i / DIM) % DIM;\n\t\tthis.row = Math.floor(i / (DIM * DIM));\n\t\tthis.num = i % DIM;\n\t}\n}\n\nclass SparseMatrix {\n\tentryNode = null;\n\tselected_rows = [];\n\trow_po = [];\n\tsolutions = [];\n\tsol_limit = 1;\n\terrors = [];\n\n\tconstructor(mat = make_matrix()) {\n\t\tthis.entryNode = new SparseNode();\n\t\tlet curr = this.entryNode;\n\t\t//row constraints\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\tcurr.append_right_header();\n\t\t\t\tcurr = curr.right;\n\t\t\t}\n\t\t}\n\n\t\t//col constraints\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\tcurr.append_right_header();\n\t\t\t\tcurr = curr.right;\n\t\t\t}\n\t\t}\n\n\t\t//row-col constraints\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\tcurr.append_right_header();\n\t\t\t\tcurr = curr.right;\n\t\t\t}\n\t\t}\n\n\t\t//box constraints\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\tcurr.append_right_header();\n\t\t\t\tcurr = curr.right;\n\t\t\t}\n\t\t}\n\n\t\tcurr.right = this.entryNode;\n\t\tthis.entryNode.left = curr;\n\n\t\tfor (let i = 0; i < DIM * DIM * DIM; i++) {\n\t\t\tlet n = this.entryNode.right;\n\t\t\tlet last_con = null;\n\t\t\tlet first_con = null;\n\t\t\tfor (let j = 0; j < DIM * DIM * COL_EXTEND; j++, n = n.right) {\n\t\t\t\tif (mat[i][j]) {\n\t\t\t\t\tlet ins = new SparseNode();\n\t\t\t\t\tlet pos = n.jump_to_lowest();\n\t\t\t\t\tpos.down = ins;\n\t\t\t\t\tins.up = pos;\n\t\t\t\t\tins.down = n;\n\t\t\t\t\tn.up = ins;\n\t\t\t\t\tins.header = n;\n\t\t\t\t\tif (first_con == null) {\n\t\t\t\t\t\tfirst_con = ins;\n\t\t\t\t\t\tthis.row_po.push(first_con);\n\t\t\t\t\t}\n\t\t\t\t\tif (last_con != null) {\n\t\t\t\t\t\tlast_con.right = ins;\n\t\t\t\t\t\tins.left = last_con;\n\t\t\t\t\t}\n\t\t\t\t\tlast_con = ins;\n\t\t\t\t\tins.populate_from_sparse_row_index(i);\n\t\t\t\t\tins.i = i;\n\t\t\t\t\tins.j = j;\n\t\t\t\t\tn.num++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (first_con != null) {\n\t\t\t\tfirst_con.left = last_con;\n\t\t\t\tlast_con.right = first_con;\n\t\t\t}\n\t\t}\n\t}\n\n\tinitialise(tar) {\n\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\tlet num = tar[i][j];\n\t\t\t\tif (num === -1) {\n\t\t\t\t\t//do nothing\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//ith row jth col\n\t\t\t\t//select columns\n\t\t\t\t//apply select operation\n\t\t\t\tthis.selected_rows.push(i * DIM * DIM + j * DIM + num - 1);\n\t\t\t\t// cout << i * DIM * DIM + j * DIM + num - 1 << endl;\n\t\t\t\tlet n2 = this.row_po[i * DIM * DIM + j * DIM + num - 1];\n\t\t\t\tif (n2.header.is_covered === true) {\n\t\t\t\t\t//already covered constraint mismatch\n\t\t\t\t\tthis.errors.push({ row: i, col: j });\n\t\t\t\t} else {\n\t\t\t\t\tthis.cover_entire_column(n2.header);\n\t\t\t\t\tn2.header.is_covered = true;\n\t\t\t\t\tfor (let n3 = n2.right; n2 !== n3; n3 = n3.right) {\n\t\t\t\t\t\tthis.cover_entire_column(n3.header);\n\t\t\t\t\t\tn3.header.is_covered = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcover_entire_column(min) {\n\t\tthis.cover_control_column(min);\n\t\tfor (let n2 = min.down; n2 !== min; n2 = n2.down) {\n\t\t\tfor (let n3 = n2.right; n3 !== n2; n3 = n3.right) {\n\t\t\t\tthis.cover_row(n3);\n\t\t\t}\n\t\t}\n\t}\n\n\tuncover_entire_column(min) {\n\t\tfor (let n2 = min.up; n2 !== min; n2 = n2.up) {\n\t\t\tfor (let n3 = n2.left; n2 !== n3; n3 = n3.left) {\n\t\t\t\tthis.uncover_row(n3);\n\t\t\t}\n\t\t}\n\t\tthis.uncover_control_col(min);\n\t}\n\n\talgorithm_x(genMode = false, depth = 0) {\n\t\tif (this.entryNode.right === this.entryNode) {\n\t\t\t//valid solution\n\t\t\tthis.solutions.push(JSON.parse(JSON.stringify(this.selected_rows)));\n\t\t\treturn;\n\t\t}\n\n\t\tlet st = this.entryNode.right;\n\t\tlet s = st.num;\n\t\tlet min = st;\n\t\tfor (st = st.right; st !== this.entryNode; st = st.right) {\n\t\t\tif (st.num < s) {\n\t\t\t\tmin = st;\n\t\t\t}\n\t\t}\n\t\tif (genMode && depth < 7) {\n\t\t\t//get a random no from 1 to DIM * DIM * COL_EXTEND\n\t\t\tlet jumps = Math.floor(Math.random() * 100);\n\t\t\tfor (let i = 0; i < jumps; i++, min = min.right) {}\n\t\t\tif (min === this.entryNode) {\n\t\t\t\tmin = min.right;\n\t\t\t}\n\t\t}\n\n\t\t//header col in min\n\n\t\tif (min.num === 0) {\n\t\t\t//Unsuccessful Match\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cover_entire_column(min);\n\t\tfor (let n2 = min.down; n2 !== min; n2 = n2.down) {\n\t\t\tthis.selected_rows.push(n2.i);\n\t\t\t// cover_entire_column(n2.header);\n\t\t\tfor (let n3 = n2.right; n2 !== n3; n3 = n3.right) {\n\t\t\t\tthis.cover_entire_column(n3.header);\n\t\t\t}\n\t\t\tthis.algorithm_x(genMode, depth + 1);\n\t\t\tif (this.solutions.length >= this.sol_limit) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.selected_rows.pop();\n\t\t\tfor (let n3 = n2.left; n3 !== n2; n3 = n3.left) {\n\t\t\t\t//uncover n3.header\n\t\t\t\tthis.uncover_entire_column(n3.header);\n\t\t\t}\n\t\t\t// uncover_entire_column(n2.header);\n\t\t}\n\n\t\t//uncover min\n\t\tthis.uncover_entire_column(min);\n\t}\n\n\tget_sudoku_grid(v) {\n\t\tif (v === undefined || v === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet sol = Array.from({ length: DIM }, (_v, _i) =>\n\t\t\tArray.from({ length: DIM }, (_v2, _i2) => 0)\n\t\t);\n\t\tlet helper = new SparseNode();\n\t\tfor (let i = 0; i < v.length; i++) {\n\t\t\thelper.populate_from_sparse_row_index(v[i]);\n\t\t\tsol[helper.row][helper.col] = helper.num + 1;\n\t\t}\n\t\treturn sol;\n\t}\n\n\tprint_matches() {\n\t\tconsole.log('Successful Matches');\n\t\tthis.solutions.forEach((v) => {\n\t\t\tlet sol = this.get_sudoku_grid(v);\n\t\t\tfor (let i = 0; i < DIM; i++) {\n\t\t\t\tfor (let j = 0; j < DIM; j++) {\n\t\t\t\t\tprocess.stdout.write(sol[i][j].toString());\n\t\t\t\t}\n\t\t\t\tconsole.log();\n\t\t\t}\n\t\t});\n\t}\n\n\tcover_control_column(col) {\n\t\tcol.left.right = col.right;\n\t\tcol.right.left = col.left;\n\t}\n\n\tuncover_control_col(col) {\n\t\tcol.left.right = col;\n\t\tcol.right.left = col;\n\t}\n\n\tcover_row(row) {\n\t\trow.up.down = row.down;\n\t\trow.down.up = row.up;\n\t\trow.header.num--;\n\t}\n\n\tuncover_row(row) {\n\t\trow.up.down = row;\n\t\trow.down.up = row;\n\t\trow.header.num++;\n\t}\n}\n\n//columns 0 - DIM * DIM are row constraints\n//columns DIM * DIM - 2 * DIM * DIM are col constraints\n//column 2 * DIM * DIM - 3 * DIM * DIM are row-col constraints\n//columns 3 * DIM * DIM - 4 * DIM * DIM are box constraints\n\n// function testing_code() {\n// \t//first construct the sparse matrix\n\n// \tlet tar = [\n// \t\t[1, 4, 9, -1, -1, -1, -1, 2, 8],\n// \t\t[3, -1, -1, 9, 4, 8, -1, -1, -1],\n// \t\t[-1, -1, -1, -1, 1, 2, -1, -1, 7],\n// \t\t[-1, 2, -1, 4, -1, 6, -1, 3, -1],\n// \t\t[8, -1, 6, -1, -1, -1, 5, -1, 4],\n// \t\t[9, 1, -1, -1, 5, 3, -1, -1, -1],\n// \t\t[-1, -1, 1, 6, 3, -1, 7, 9, -1],\n// \t\t[2, 6, -1, -1, 9, -1, 4, 1, -1],\n// \t\t[4, 9, 3, 2, -1, -1, -1, -1, -1],\n// \t];\n\n// \tlet tar2 = [\n// \t\t[-1, -1, -1, 8, -1, 1, -1, -1, -1],\n// \t\t[-1, -1, -1, -1, -1, -1, -1, 4, 3],\n// \t\t[5, -1, -1, -1, -1, -1, -1, -1, -1],\n// \t\t[-1, -1, -1, -1, 7, -1, 8, -1, -1],\n// \t\t[-1, -1, -1, -1, -1, -1, 1, -1, -1],\n// \t\t[-1, 2, -1, -1, 3, -1, -1, -1, -1],\n// \t\t[6, -1, -1, -1, -1, -1, -1, 7, 5],\n// \t\t[-1, -1, 3, 4, -1, -1, -1, -1, -1],\n// \t\t[-1, -1, -1, 2, -1, -1, 6, -1, -1],\n// \t];\n\n// \tm = new SparseMatrix();\n\n// \tm.initialise(tar);\n// \tm.algorithm_x();\n// \tm.print_matches();\n\n// \tm = new SparseMatrix();\n// \tm.initialise(tar2);\n// \tm.algorithm_x();\n// \tm.print_matches();\n\n// \treturn 0;\n// }\n\nfunction find_sol(tar) {\n\tlet m = new SparseMatrix();\n\n\tm.initialise(tar);\n\tif (m.errors.length === 0) {\n\t\tm.algorithm_x();\n\t\treturn { sol: m.get_sudoku_grid(m.solutions[0]) };\n\t} else {\n\t\treturn { errors: m.errors };\n\t}\n}\n\nfunction create_puzzle() {\n\tlet m = new SparseMatrix();\n\tm.algorithm_x(true);\n\treturn m.get_sudoku_grid(m.solutions[0]);\n}\n\n// create_puzzle();\n\nexport { find_sol, create_puzzle };\n\n// testing_code();\n","import { find_sol } from './dlx';\n\nfunction get_no_errors() {\n\treturn [\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t];\n}\n\nonmessage = (event) => {\n\tconsole.log('Recieved message');\n\tconst action = JSON.parse(event.data.jsondat);\n\tconsole.log(action);\n\tlet sols = undefined;\n\tlet errors = get_no_errors();\n\tlet r;\n\ttry {\n\t\tr = find_sol(action.newg);\n\t\tif (r.sol !== undefined) {\n\t\t\tsols = r.sol;\n\t\t} else if (r.errors !== undefined) {\n\t\t\t//highlight the wrong nums\n\t\t\tif (r.errors.length === 0) {\n\t\t\t\terrors.forEach((t) => {\n\t\t\t\t\tfor (let i = 0; i < t.length; i++) {\n\t\t\t\t\t\tt[i] = 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tr.errors.forEach(({ row, col }) => {\n\t\t\t\t\terrors[row][col] = 1;\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('Too few clues to solve');\n\t\t\terrors = errors.map((t) => t.map((_r) => 1));\n\t\t}\n\t} catch (ex) {\n\t\tconsole.log('Too few clues to solve');\n\t\terrors = errors.map((t) => t.map((_r) => 1));\n\t} finally {\n\t\tpostMessage({\n\t\t\tjsondat: JSON.stringify({\n\t\t\t\tid: action.id,\n\t\t\t\tsolution: sols,\n\t\t\t\terrors: errors,\n\t\t\t}),\n\t\t});\n\t}\n};\n"],"names":["_classCallCheck","instance","Constructor","TypeError","_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","String","Number","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","DIM","COL_EXTEND","SparseNode","right","left","up","down","header","j","row","col","num","is_covered","this","prev","n","Math","floor","SparseMatrix","mat","Array","from","_v","_i","_v2","_i2","off","Error","make_matrix","entryNode","selected_rows","row_po","solutions","sol_limit","errors","curr","append_right_header","last_con","first_con","ins","pos","jump_to_lowest","push","populate_from_sparse_row_index","tar","n2","cover_entire_column","n3","min","cover_control_column","cover_row","uncover_row","uncover_control_col","genMode","depth","st","s","jumps","random","algorithm_x","pop","uncover_entire_column","JSON","parse","stringify","v","sol","helper","console","log","forEach","get_sudoku_grid","process","stdout","write","toString","onmessage","event","action","data","jsondat","r","sols","m","initialise","find_sol","newg","t","map","_r","ex","postMessage","id","solution"],"sourceRoot":""}